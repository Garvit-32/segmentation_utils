import numpy as np
import cv2, zlib, base64, io
from PIL import Image
import json
import matplotlib.pyplot as plt

def base64_2_mask(s):
    z = zlib.decompress(base64.b64decode(s))
    print(z)
    n = np.fromstring(z, np.uint8)  
    mask = cv2.imdecode(n, cv2.IMREAD_UNCHANGED)[:, :, 3].astype(bool)
    return mask

def mask_2_base64(mask):
    img_pil = Image.fromarray(np.array(mask, dtype=np.uint8))
    img_pil.putpalette([0,0,0,255,255,255])
    bytes_io = io.BytesIO()
    img_pil.save(bytes_io, format='PNG', transparency=0, optimize=0)
    bytes = bytes_io.getvalue()
    return base64.b64encode(zlib.compress(bytes)).decode('utf-8')


mask_str = '''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'''

mask_small = base64_2_mask(mask_str)
print(mask_small.shape)
